
  [remarkfun]: ../bin/newlib "remark function"
  [remarkdoc]: ../explain/remark.txt "remark explanation"

### Adding a feature

Shell functions offer a great way to add features.

A few days ago, I encountered a "stability scale" of software.  How
stable is an API's interface?  The idea is not to change the
compact/contract an interface has with its users while adding features.

I chose the `comment` function as an experiment.  This function does
what it name suggests.  The arguments to the function represent a
_comment_.  In this case, think of the function name as either a noun
or verb.  "It is a comment", or "Please comment on what's happening".
The implied side-effect here is to put the result on the __stderr__,
since the real (desired) output goes to the __stdout__.  For any
number of years, I've used the `echo` shell built-in:

    echo "$@" 1>&2
    
as the simple mechanism.  For some time, the shell has offered
formatted output using the `printf` primitive.

So, the question is: _How to upgrade **comment** without disturbing
the current interface?_

#### Extending an interface

This is a two-step process.  When the dust settles, we want a comment
function which will take a format statement as its first argument not.
And if the first argument is a format statement, use it as an argument
to `printf`, otherwise, treat it as in the past.

The first step is to design and test the desired behavior under a
pseudonym.  For that, I chose "remark", even more of an aside.  The
`remark` function will give the desired behavior, while the existing 
`comment` remains unchanged.

Then, in real life, a few existing `comment`s can adopt the
`remark`, both with and without the new behavior, and when
sufficient use-testing has occured, we can do two things
simultaneously: replace `comment` the function, with `remark`,
leaving it in place, while following up by restoring the users of the
new `remark` to use the now-modified `comment`.

At the moment, I've a reasonable working [remark function][remarkfun].
(Scroll to the bottom of the listing, or search "remark".)

On to the next stage.

#### References

This [document source][remarkdoc].
