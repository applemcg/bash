is () 
{ 
    [[ $# -gt 1 ]] && { 
        eval _is_$1="$2"
    };
    eval echo \$_is_$1
}
refreshT () 
{ 
    function lastfuns () 
    { 
        ls $(ETCLIB)/.20* | grep -v '[#~]$' | tail -1
    };
    [[ "$(lastfuns)" == "$(T)" ]] && return;
    fbdy $(functions $(lastfuns)) | T append
}
savef () 
{ 
    fbdy $* | T append
}
smartf () 
{ 
    eval " $1 () { \${*:-echo} $2; }"
}
smartf_doc () 
{ 
    ( cat  <<EOF
is -- ~ a b, such that "is a" returns b
smartf -- ~ NAME file, s.t. NAME returns "file, and
       -- NAME command, operates "command" on file.
savef -- ~ fa fb fc ..., saves functions in T
refreshT -- saves copies of new functions in T
~_init -- creates smartfs   ETCLIB and T in ETCLIB
EOF
 ) | sed 's/^/    /; s/ --/	--/'
}
smartf_init () 
{ 
    . programlib;
    isfunction today || { 
        comment NO today function;
        return
    };
    comment bkup: appleton.home./Users/applemcg/git/bash-functions/bin 2013_0414 093306;
    smartf_smartf ETCLIB $HOME/etc/lib;
    smartf_smartf T $(ETCLIB)/.$(today);
    smartf_smartf smartflib $HOME/bin/smartflib;
    smartf_doc 1>&2
}
smartf_is () 
{ 
    [[ $# -gt 1 ]] && { 
        eval _smartf_is_$1="$2"
    };
    eval echo \$_smartf_is_$1
}
smartf_refreshT () 
{ 
    function lastfuns () 
    { 
        ls $(ETCLIB)/.20* | grep -v '[#~]$' | tail -1
    };
    [[ "$(lastfuns)" == "$(T)" ]] && return;
    fbdy $(functions $(lastfuns)) | T append
}
smartf_savef () 
{ 
    fbdy $* | T append
}
smartf_smartf () 
{ 
    eval " $1 () { \${*:-echo} $2; }"
}
smartf_init
