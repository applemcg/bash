scatter_man () 
{ 
    cat  <<EOF
<title>
scatter(1)                                                         scatter(1)
</title>
###	NAME 

>	**scatter** -- detect the token "scatter" of an ascii text

###	SYNOPSIS 

>	$ source scatterlib   

>	$ scatter [ file ... ]

###	DESCRIPTION

> scatter reads from the standard input or the named files on the
	command line and computes a collective "scatter" function for
	the input.  as a TOTAL, it also reports the number of separate
	tokens and the total scatter for the input.

>	**scatter** is the square root of the sum of the squares of the
    separation of successive appearance of an individual token,
    where separation is measured in units of tokens.  successive
    appearances of a single token have a separation of 1.

>	a token is  the longest sequence of alphabetic and numeric characters,
	to include the underscore.

###	BUGS

>	none known.

###	USES

>	nothing -- self-contained bash.

###	AUTHOR

>	mcgowan@alum.mit.edu

EOF

}
scatter_page () 
{ 
    source pmkdnlib;
    mkd_page scatter
}
scatterlib_init () 
{ 
    source programlib 2> /dev/null;
    comment bkup: appleton.home./Users/applemcg/bin 2013_0116 165142;
    comment "Copyright (C) 2005-2013, JYATL, Just Yet Another Testing Lab";
    comment $(functions scatterlib | grep man)
}
antoken () 
{ 
    sed 's/[^a-zA-Z0-9_]/ /g' | wpl | grep -v '^ *$' | tee ontoken.txt
}
scatter () 
{ 
    cat ${*:--} | antoken | awk '

END	{
	fmt2 = "%7d\t%-14s\t%7.1f\n"

	for (w in sumsq) {
		outwdat( fmt2, w)
	}
	printf fmt2,TWC, "_TOTAL",  sqrt(totalsmsq/TWC)
}
function outwdat( fmt2, w) {
	TWC++;
	favg( w, count[w]);
	printf fmt2, count[w], w, sqrt(avgsq[w]);
}
function upd( word, d) { sumsq[word] += d*d; totalsmsq += d*d; }
function favg( w, num)  {
	if(num > 1) {
		avgsq[w] = sumsq[w] /(num - 1)
	}
}
	{ 
		if(count[$1]++)	upd( $1, NR-last[$1]) # after the first
		last[$1] = NR
	}
'
}
scatterlib_init
