qvslib_init () 
{ 
    source blib;
    source smartflib;
}
qvs_help () 
{ 
    comment qvs_doc, qvs_note, qvs_help, qvs, qvs_page
}
set_verbase () 
{ 
    comment PWD $PWD;
    path=${PATH//:/ };
    for p in $(echo ${path//\/bin/}) $SYSTEM_DEPENDENT_USER_HOME;
    do
        comment p $p;
        case ${PWD} in 
            $p/*)
                is VER_BASE $p;
                get_verbase;
                return
            ;;
        esac;
    done
}
get_verbase () 
{ 
    comment "VER_BASE=$VER_BASE, PWD=${PWD}, RWD=$(ver_rwd)"
}
verbase () 
{ 
    case ${PWD} in 
        $VER_BASE/*)
            case $VER_BASE in 
                "")
                    set_verbase
                ;;
                *)
                    get_verbase
                ;;
            esac
        ;;
        *)
            set_verbase
        ;;
    esac
}
cleanlist () 
{ 
    ( grep '^\.' $VERFILES;
    ls ) | sort | comm -3 - $VERFILES
}
verhome () 
{ 
    echo ${VER_HOME:-$HOME}
}
qvsfrom () 
{ 
    is VER_BASE ${1:-$HOME};
    is VER_HOME ${1:-$VER_BASE};
    comment verhome, verbase
}
qvsto () 
{ 
    is VER_HOME ${1:-$HOME};
    comment verhome
}
ver_rwd () 
{ 
    echo ${PWD#${VER_BASE:-$HOME}}
}
verlocn () 
{ 
    echo ${VER_HOME:-$HOME}/$(ver_rwd)/.ver
}
_mkVername () 
{ 
    [[ -d $(verlocn)/$1 ]] && { 
        echo Version $1 Exists;
        exit 3
    };
    echo $1
}
qvs () 
{ 
    function lnS () 
    { 
        _do_cp ${PWD}/$2 $1
    };
    function _do_cp () 
    { 
        comment cp $*;
        cp $*
    };
    function _do_ln () 
    { 
        comment ln $*;
        ln $*
    };
    function _qvs_hardlink () 
    { 
        target=$1;
        shift 2;
        _do_ln $* $target
    };
    function _qvs_softlink () 
    { 
        foreachi lnS $*
    };
    function _qvs_ln () 
    { 
        ln $2 $1 2> /dev/null && { 
            _qvs_hardlink $*;
            return
        } || _qvs_softlink $*
    };
    function _doqvs_at () 
    { 
        mkdir -p $1;
        _qvs_ln $1 $(_doqvs $(bflist $*))
    };
    function _qvfnames () 
    { 
        for f in "$@";
        do
            [[ -f $f ]] && echo $f;
        done
    };
    _doqvs_at $(verlocn)/$(_mkVername $1 $(verSecond))
}
bflist () 
{ 
    indir .bak onlyfiles
}
verfiles () 
{ 
    echo ${VERFILES:-.files}
}
verSecond () 
{ 
    date '+%Y_%m%d_%H%M%S'
}
thisSecond () 
{ 
    date '+%Y%m%d%H%M%S'
}
_doqvs () 
{ 
    bkup $*;
    for f in "$@";
    do
        [[ -f .bak/$f ]] && echo .bak/$f;
    done
}
qver ()
{
   set -- ${1:-last}
   case $1 in 
    (last)      ls -t $(verlocn) | sed 1q;;
    (names)     ls -t $(verlocn) | grep -v '^2[0-9][0-9]*$';;
    (named)     qver names | sed 1q;;
    (*)         comment "qver [last|names|named -> last]";;
   esac
}
verDirectory () 
{ 
    echo $(verlocn)/$(${1:-lastVer})
}
rollupV () 
{ 
    vname=$1;
    shift;
    odir=Version/$vname;
    mkdir -p $odir;
    find ${*:-.} -type f | grep $vname | sed "s/.ver.$vname\///" | cpio -pdluvm $odir
}
qvs_man () 
{ 
    open ~/man/man1/qvslib.html
}
newVprog () 
{ 
    bkup $(< .files);
    foreach clearBak $(vpreplist);
    bakVer
}
clearBak () 
{ 
    indir .bak bkup $f;
    rm -f $f
}
vpreplist () 
{ 
    indir .bak ls | comm -23 - .bak/.files
}
bakVer () 
{ 
    mkdir -p $1;
    cat .files | cpio -pduvm $1
}
qvslib_clog () 
{ 
    cat  <<EOF

2012_0211, Sat, Feb 11   changed default verlocn to YYYY_MMDD_HHMMSS format, adding _s

EOF

}
latestDir () 
{ 
    echo $1/$(ls -t $1 | sed 1q)
}
latestVer () 
{ 
    foreach latestDir $(find $* -type d -name .ver)
}
needver () 
{ 
    set -- $(ls -t .ver);
    find . -newer .ver/$1 -type f
}
deepbak () 
{ 
    find $(find .bak -type d | sed ${1:-6}q | tail -1) -type f
}
changes () 
{ 
    find .ver -type f | xargs ls -i | sort -n | awk '{ if( printed[$1]++) next} ; { print $2}'
}
byversion () 
{ 
    changes | sort | sed 's/.ver.//; s/\/.*//'
}
qvslib_init
