comment ()
{
	echo "$@" 1>&2
}
tasks () 
{ 
    namevalue toolbase
    toolbase  $HOME

    comment tasks $*

    function name () 
    { 
        echo "$PWD/$1"
    };
    
    function report () 
    { 
        echo $1:; shift;
        eval "$@" | sed 's/^/    /'
    };
    function installed ()
    {
        case $1 in 
	"")  toolbase
	     ;;
	*)   
	     mkdir -p $1/lib/tasks
	     ;;
 	esac
    }
    function finished ()
    {
	echo "$PWD/completed.txt"
    };
    function somecomplete () 
    { 
        touch completed.txt
        sort -r completed.txt | sed ${1}q
    };
    function help () 
    { 
        report "current tasks" tasks;
        report "last 12 completed" somecomplete 12;
        report functions functions $(installed)/bin/tasklib;
        report HINT echo tasks, tasks help, tasks name, tasks finished
    };
    installed $(toolbase)
    ignore pushd $(installed)/lib/tasks
    f=tasks.txt;
    touch $f;
    cmmd=${1:-"pr -t -n"}; shift
    eval $cmmd $f $*
    ignore popd
}
tpush () 
{ 
    comment tpush $*
    function prepend () 
    { 
      comment prepend $*
      f=$1; shift;
        ( echo $*
        cat $f ) > .y;
        mv .y $f
    };
    tasks prepend $*
}
tpeek () 
{ 
    function seefirst () 
    { 
        sed 1q $1
    };
    tasks seefirst
}
ttop ()
{
	function toTop ()
	{
		awk	"
		BEGIN	{top = $2 }"'
			{record[NR] = $0 }
		END	 { save = record[top]
			for (n=top; n>1; n--) {
				record[n] = record[n-1]
			}
			record[1] = save
			for (n=1; n<= NR; n++)
				print record[n]
			}
		
		' $1 >  .y; mv .y $1
	}

	tasks toTop ${1:-1}
}
tqueue () 
{ 
    function append () 
    { 
      f=$1; shift
        ( cat $f;
        echo "$@" ) > .y;
        mv .y $f
    };
    tasks append $*
}
tcomplete () 
{ 
    function tdated () 
    { 
        shift; dated  $* >> completed.txt
    };
    tasks tdated  $(tpop)
}
tpop () 
{ 
    function lopTop () 
    { 
        set -- $1 $(sed 1q $1);
        tail +2 $1 > .y;
        mv .y $1; 
	shift; echo $*
    };
    tasks lopTop
}
tasklib_init ()
{
     source programlib 2>/dev/null
     source smartflib 2>/dev/null
     logUse tasklib sourced programlib
     tasks help
}

 tasklib_init
