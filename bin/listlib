list_init () 
{ 
    echo "Copyright (C) 2013, JYATL - Just Yet Another Testing Lab";
    list_traceon;
    list empty
    list_help

}
list_exists () 
{
    list_trace list_exists NAME $1
    env | grep "^l_$1=" >/dev/null
}
list_add ()
{
    list_trace list_add NAME $1 ALL $*;
    list_exists $1 || { list $*; return; }
    l=l_$1; shift
    eval $l=\"\$$l $*\"
    eval echo \$$l
}
list () 
{ 
    list_trace list NAME $1 ALL $*;
    function list_def () 
    { 
        list_trace list_def ARGS $*
	set -- l_$1
        export $1
        eval $1=
    };

    list_trace list CASE $#.$1
    case $#.$1 in
    (0.*)
        comment "No list specified; listing all lists";
	list_lists; 
	return;;
    (1.list)
        list_lists; return;;
    (1.empty)
        list_exists empty || list_def empty; 
	return;;
    (1.*)
        list_exists $1 || list_def $1; 
	l=l_$1; shift;;
    (*)
        list_def $1;
	l=l_$1; shift;
	eval $l=\"$*\"
    ;;
    esac
    list_trace list SHOWS $l
    eval echo \$$l
}
list_trace	() { eval echo TRACE $# $* $TRACE_OUT; }
list_traceon () 
{ 
    TRACE_OUT="1>&2";
    export TRACE_OUT
}
list_traceoff () 
{ 
    TRACE_OUT=">/dev/null";
    export TRACE_OUT
}
list_lists	() { env | grep ^l_.*= | sed 's/=.*//; s/l_//' | grep -v '^ *$'; }
list_delete () 
{ 
    list_trace list_delete NAME $1;
    [[ $# -gt 1 ]] && { 
        echo WARNING you may mean list_remove $*;
        return 3
    };
    [[ "$1" = "empty" ]] && return;

    list_exists $1 && unset l_$1
}
list_remove () 
{ 
    list_trace list_remove NAME $1 ALL $*;
    function items () 
    { 
        eval echo \$$1
    };
    function unlist () 
    { 
        ol=" $(items $1) ";
        rm=" $2 ";
        echo ${ol/$rm/ }
    };
    [[ $# -lt 2 ]] && { 
        echo WARNING you may mean list_delete $1;
        return 2
    };
    list_exists $1  || { 
        echo WARNING no LIST $1 2> /dev/null;
        return 1
    };
    [[ "$1" = "empty" ]] && return;

    l=l_$1;    shift;
    for i in $*;
    do
        eval $l=\"$(unlist $l $i)\";
    done;
    eval echo \$$l
}
list_show () 
{ 
    case ${1:-lists} in 
        lists)
            list_lists
        ;;
        *)
            list_exists $1 && list $1
        ;;
    esac
}
list_qrf	() { echo list list_trace list_traceon list_traceoff list_lists list_delete list_remove list_add list_show list_init list_qrf list_help list_test; }
list_help () 
{ 
    list_qrf;
    echo "hint: list_lists, _traceon, _traceoff";
    echo "and Deletes the LIST, Removes the list ITEM"
}
list_test () 
{ 
    function l_do () 
    { 
        echo TEST $*;
        echo RESULT:;
        $*;
        echo
    };
    function list_testClean () 
    { 
        l_do list_delete foo;
        l_do list_delete the;
        l_do list_delete lists
    };
    list_testClean;
    l_do list empty;
    l_do list_lists;
    l_do list foo bar zot gum;
    l_do list_show foo;
    l_do list_add foo one two then the last;
    l_do list_show foo;
    l_do list foo one two then the last;
    l_do list_show foo;
    l_do list_remove foo;
    l_do list_delete foo then;
    l_do list_lists;
    l_do list_add the another list;
    l_do list_lists;
    l_do list_remove foo the;
    l_do list_show foo;
    l_do list_show gum;
    l_do list_lists;
    list_testClean
}
list_init 1>&2
