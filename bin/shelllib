shell_init () 
{ 
    comment "Copyright (C) 2011-2013, JYATL -- Just YA Testing Lab";
    comment "mailto: mcgowan (at) alum DOT mit DOT edu";
    comment bkup: Patricias-MacBook-Air.local./Users/applemcg/dropbox/bin 2013_0904 094911;
    shell_forpairs shell_argtest z empty x executable d existingdir e exists f existingfile s nonempty w writeable;
    shell_foreachi obstolib shell $(shell_obs)
}
shell_forpairs () 
{ 
    local cmd=$1;
    shift;
    while [ -n "$2" ]; do
        $cmd $1 $2;
        shift 2;
    done
}
shell_append () 
{ 
    [[ -w $1 ]] || { 
        chmod +w $1;
        comment WARNING making $1 Writeable for shell_append;
        tee -a $1;
        chmod -w $1;
        return
    };
    tee -a $1
}
shell_bitbucket	() { eval $@ 2> /dev/null; }
shell_cfe () 
{ 
    eval "xx() { $1; }";
    shift;
    foreach xx "$@"
}
shell_error () 
{ 
    comment "$@";
    exit $#
}
shell_foreach () 
{ 
    local cmd=$1;
    shift;
    for arg in "$@";
    do
        $cmd $arg;
    done
}
shell_foreachi () 
{ 
    local par="$1 $2";
    shift 2;
    for a in "$@";
    do
        $par $a;
    done
}
shell_foreachij () 
{ 
    local par="$1 $2 $3";
    shift 3;
    for a in "$@";
    do
        $par $a;
    done
}
shell_indir () 
{ 
    ignore pushd $1;
    shift;
    $@;
    ignore popd
}
shell_missing	() { [[ -f $1 ]] || echo $1; }
shell_not () 
{ 
    if { 
        eval "$@"
    }; then
        false;
    else
        true;
    fi
}
shell_onlydirs () 
{ 
    for arg in ${*:-*};
    do
        [[ -d $arg ]] && echo $arg;
    done
}
shell_onlyfiles () 
{ 
    for arg in ${*:-*};
    do
        [[ -f $arg ]] && echo $arg;
    done
}
shell_out2err	() { "$@" 1>&2; }
shell_pipe () 
{ 
    comment TRACE shell_pipe $# $*;
    doit $(shell_shifted $@) | $1
}
shell_shift2 () 
{ 
    shift;
    shift;
    echo "$@"
}
shell_shifted () 
{ 
    shift;
    echo "$@"
}
shell_stdout () 
{ 
    comment TRACE shell_stdout $# "$@";
    o="$1";
    shift;
    "$@" > "$o"
}
shell_testarg	() { eval "$1() { [[ -$2 \$1 ]]; }"; }
shell_argtest	() { shell_testarg $2 $1; }
shell_test () 
{ 
    comment TRACE shell_... $# $*;
    function pipe_test () 
    { 
        while read name; do
            declare -f $name;
        done
    };
    mkdir /tmp/shell;
    pushd /tmp/shell;
    rm -f *;
    shell_stdout stdout cat ~/bin/shelllib;
    shell_quiet comment a quiet comment > quiet;
    shell_pipe pipe_test functions ~/bin/shelllib > piped;
    comment NOT Yet: shell_stdout shell_pipe pipe_test functions ~/bin/shelllib;
    popd
}
shell () 
{ 
    shell_qcmd="shell_$1";
    declare -f $shell_qcmd > /dev/null || { 
        shell_qrf 1>&2;
        return
    };
    shift;
    $shell_qcmd "$@"
}
shell_qrf	() { functions $(which shelllib); }
shell_obs () 
{ 
    ignore pushd ~/Dropbox/bin;
    comm -13 <(functions programlib cmdlib newlib|sort) <(functions shelllib | egrep -v '(shell|test|_init|_qrf)$' | sed 's/^shell_//' | sort);
    ignore popd
}
shell_init 1>&2
