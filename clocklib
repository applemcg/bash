clockapp_init () 
{ 
    comment "Copyright (C) 2012 -- JYATL; Just Yet Another Testing Lab";
    comment bkup: appleton.home./Users/applemcg/bin 2012_0625 153959
    [[ -d "$HOME/lib/clock" ]] || mkdir -p "$HOME/lib/clock";
    [[ -f "$HOME/lib/clock/tasklist.txt" ]] || { 
        echo Enter Your Task | toTasklist
    };
    echo "tc [task], task[hist, sum], clocklib_doc" 1>&2
}
clocklib () 
{ 
    case $1 in 
        stamp)
            shift;
            date "+%Y%m%d_%H%M%S%t%s%t%U%t$*"
        ;;
        taskcolumn)
            echo 4
        ;;
        *)
            clocklib_doc | more
        ;;
    esac
}
tasksum () 
{ 
    function printed () 
    { 
        awk "printed[\$$1]++ < 1"
    };
    taskhist $1 | sort | printed $(clocklib taskcolumn)
}
clock_data () 
{ 
    clocklib stamp NOW;
    sort -r "$HOME/lib/clock/taskclock.txt" | sed 's/ /	/g' | uniq
}
clock_history () 
{ 
    awk "
           BEGIN  { col=$(clocklib taskcolumn) }"'
                  { d=last-$2; c = cum[$col]+=d; last=$2 }
           NR > 1 { printf "%-49s\t%7d\t%6.1f\n", $0, d, c/60 }
          ' $*
}
taskhist () 
{ 
    function today () 
    { 
        date "+%Y%m%d"
    };
    function gdate () 
    { 
        grep "^$1_"
    };
    function choose () 
    { 
        case $1 in 
            ??)
                gdate $(date "+%Y%m$1")
            ;;
            ????)
                gdate $(date "+%Y$1")
            ;;
            ??????)
                gdate 20$1
            ;;
            ????????)
                gdate $1
            ;;
        esac
    };
    clock_data | choose ${1:-$(today)} | clock_history
}
tc () 
{ 
    function underarg () 
    { 
        echo $* | tr ' ' _
    };
    function record () 
    { 
        clocklib stamp "$*" | toTaskClock
    };
    function update () 
    { 
        ( echo "$2";
        grep -v "^$2\$" $1 ) > .y;
        mv .y $1;
        echo "$2"
    };
    function pick1 () 
    { 
        cat $1 $1 | { 
            while read name; do
                echo -n "$name ? [y,n]" > /dev/tty;
                read ans < /dev/tty;
                case $ans in 
                    [Yy]*)
                        echo $name;
                        break
                    ;;
                esac;
            done
        }
    };
    function track () 
    { 
        record $(update $1 "${2:-$(pick1 $1)}")
    };
    track "$HOME/lib/clock/tasklist.txt" $(underarg $*)
}
clocklib_help () 
{ 
    clocklib_doc | more
}
clocklib_doc () 
{ 
    cat  <<EOF

clocklib (1)          records and reports time on task       clocklib(1)      

USAGE

   $ bash
   $ source clocklib
   ...
   $ tc [task name]
   $ clocklib_doc
   $ taskhist   [dayspec]
   $ tasksum    [dayspec]
   $ clock_data
   $ clock_history 
   $ clock_week [week number {current}]
   $ clock_repair

SYNOPSIS

   Clocklib supplies Bash functions to track your Time On Task. 

   The "tc" function is the TimeClock. With a "task name", it logs the
current time and task name.  With no task name, it prompts with the
list of previous task names in the most recent used order. A "Y" or
"y" (Yes, yes, ..)  reply to any task name selects it as the present
task.

  A few accounting functions are available.  The optional "dayspec"
may be a two, four, six, or eight-digit number, interpreted as the
least-significant portion of the YYYYMMDD string for a date.  The
defaults are the current year, month, and date.  e.g today.

  "taskhist" shows the task log, in reverse time order, annotated with
the number of seconds on each task, and a decimal number of
accumulated minutes.

  "tasksum" shows the accumuated time for each task during a given
"dayspec", defaulting to today.

  "clock_data" dumps the raw data, most recent first, with a leading
timestamp "NOW", suitable for use by clock_history.  this is used to
experiment with selection critieria.

  "clock_history" reports accumulated time on task by task for a selected
portion of the clock_data.

  "clock_week" reports accumlated time on task for a given week number,
defaulting to the current week.

  "clock_repair" allows fixing of history. see EXAMPLES.

EXAMPLES

  $ tc clocklib     # when i'm working on clocklib
  $ tc HOME         # punch out to go home.
  $ tc 
    ...
    coffee ?        # say "y" to take a break
  $
  ...
  $ taskhist       # what have i done today
  $ tasksum        # and how much of each task
  $ taskhist 0317  # for March 17 of this this year
  $ clocklib       # alias for clocklib_doc
  $ clock_week 7   # how much time-on-task in week 7

  $ set -- \$(clock_repair); echo \$*       # returns a timestamp
  $ clock_repair \$*  OTIME ntime secs      # to see the update, then
  $ clock_repair task \$*  OTIME ntime secs # to see the update, then

   where OTIME is the from the \$stamp, 
         ntime is an earlier time,
         secs is the positive number of seconds between OTIME and ntime
     and task is the task you want to record at the corrected time

   the "ntime" should both reflect an accurate assessment of when the event
     started as well as make it easy to mentally calculate "secs"

BUGS

  This is a poor man's slimtimer, with the sole advangate it works on
your computer and not dependent on networks, company firewalls, and
other intrusions.  It does NOT support group tasks, tags, reports, and
edit tasks.  This later may be accomplished by hand.

FILES

   \$HOME/lib/clock/taskclock.txt -- the task log, where the fields are:
       time  in YYYYMMDD_hhmmss
       time  in seconds from epoch (Jan 0, 1970)
       week  number of year (Sun thru Sat)
       task  

   \$HOME/lib/clock/tasklist.txt  -- the accumlated list of tasks

REFERNECE

  slimtimer.com -- full-featured
  pick1 -- Kernighan and Pike's "Unix Programming Environment", Wiley '84

AUTHOR

  mcgowan AT alum DOT mit DOT edu

EOF

}
toTaskClock () 
{ 
    tee -a "$HOME/lib/clock/taskclock.txt"
}
toTasklist () 
{ 
    tee -a $HOME/lib/clock/tasklist.txt
}
clocklib_init () 
{ 
    source programlib 2> /dev/null;
    clockapp_init
}
clock_repair () 
{ 
    case $# in 
        0)
            clocklib stamp
        ;;
        6)
            echo "${1//$4/$5} $(expr $2 - $6) $3"
        ;;
        7)
            task=$1;
            shift;
            echo $(clock_repair $*) $task | toTaskClock
        ;;
        *)
            echo "$#:$1,$2,$3,$4.$5,$6,$7?" 1>&2;
            echo "clock_repair [[task] stamp OTIME ntime secs]" 1>&2;
            echo "\"clocklib\" to see manual page" 1>&2
        ;;
    esac
}
clock_week () 
{ 
    function thisweek () 
    { 
        date +%U
    };
    function this_week () 
    { 
        awk "\$3 == ${1:-$(thisweek)}"
    };
    function clock_sort () 
    { 
        sort | printed 4 | sort -rn -k 6
    };
    clock_data | this_week $1 | clock_history | clock_sort
}
canontags () 
{ 
    sed 's/[ 	][ 	]*/	/' ~/lib/clock/taglist.txt
}
prtags () 
{ 
    awk ' { printf "%-15s\t%s\n", $1, $2 }' $*
}
cdt () 
{ 
    clock_data | grep -i $1 | field 4 | sort -u
}
home_repair () 
{ 
    hrs=$1;
    shift;
    clock_repair HOME $* $(expr $hrs \* 3600)
}
clocklib_init
