<title>  qvs (1) -- Quick Version System -- qvs (1) </title>

###	 NAME
>__qvs_ -- a __Q__uick __V__ersion __S__ystem

###	SYNOPSIS

>__source qvslib__ -- loads the functions

>__qvs__ -- makes a local version of the __bflist__ files

>__bflist__ -- returns the list of __B__ackup __F__iles

>__qvs_help __ --

>__verbase__ --

>(__get__,**set**_verbase) --

>__qver__ [last|names|named] -- what is the name or names of the
  __last__ (default), all __names__, or last __named__ version.

###	DESCRIPTION

> __Qvs__ relies on the __bkup__ tool, which creates an ever deeper
  tree of __.bak/.bak/...__ directories, with the newest on top, and
  the aldest file in the lowest directory.  This is the process:

    1. __bkup__ the __bflist__

    2. After the backup, the file __.bak/__*file* is now identical to
      the local copy (i.e. __./__*file*, so is every file in the
      __.bak__ directory.

    3. The current version of each file in the __.bak__ directory is
      linked (__ln__) into the sub-directory whose name is
      __.ver/__*YYYY_mmdd_HHMMSS*


> the copy in current directory (i.e. the common parent directory of
__.bak__ and __.ver__) is then suitable for editing.

> after you have confidence in the yymmdd... versioning, you may delete
the deepest .bak/.bak/... directories without fear of losing your
content. (Since, so long as there is a link to a file somewhere, the
content is available).

> The __bflist__ is the list of ordinary files (no leading __.__'s in the name).
To add a file to the __bflist__, simply:

      $ bkup file

> To keep the history of a file, but remove it from the current __bflist__,
then:

      $ cd .bak
      $ bkup file     # backs up the backup
      $ rm -f file    # removes from the bflist
      $ cd ..         # back to the current directory
      $ rm -f file    # and remove it.

> The latest version of the file is now in <font
CW>.bak/.bak/file</font>, and has been removed from both the
__bflist__ and the current directory.


> __VER_BASE__ and __VER_HOME__ both default to $HOME.  If you are
synching to a remote or central versioning location, set VER_HOME to
that location. e.g. */home/mygroup*.  VER_BASE _must_ be in your current
directory path;

> all this results in setting your versioning location to:

        $(verhome)/$(ver_rwd)/.ver/$(verSecond)

> __VER_BASE__ files are stored in VER_HOME in the same realtive working
directory, Both need to be on the same file system.

> __rollupV__ permits the collection of like-named versions from
disparate sources. e.g.
 
        $ cd /home/group
        $ rollupV  LikeNamedFeature [ userA, userB, ... ]

> To give a name to the current version:

        $ mv $(qver last) .ver/SomeSuitableName

> __qvs__ is the poor-man's CVS, subversion, or __git__, all serious
  versioning systems.  __qvs__ has the distinct advantage for the
  individual user or small group of collaborating users who have
  access to the same file system.   The one thing it does _NOT_ do
  is enforce a locking mechanism.  Old-fashioned audible protocols,
  including the mobile device, can be used to supply the needed
  file locking.

###	BUGS

>There are development hooks to build _soft links_.   Don't attempt
 to use them.

>Other development work is in progrss to limit the scope of function
 names.  Do not rely on any functions not described in the
 [SYNOPSIS]().

###	ENVIRONMENT

*  VER_BASE -- 
*  VER_HOME -- 
*  SYSTEM_DEPENDENT&#95;USER&#95;HOME -- places to look to Root the Version Tree

###	AUTHOR

>[Marty McGowan](mailto:mcgowan@alum.mit.edu?subject=Manual_Page_qvslib)
